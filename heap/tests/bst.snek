(fun (add_one bst n)
     (if (= bst false)
       (vec n false false)
       (let ((curr (vec-get bst 0)) (left (vec-get bst 1)) (right (vec-get bst 2)))
         (if (= curr n)
           (vec curr left right)
           (if (< n curr)
             (vec curr (add_one left n) right)
             (vec curr left (add_one right n)))))))

(fun (const initbst nums n) (if (<= n 0) initbst
                                (let ((bst initbst) (i 0))
                                  (loop
                                   (if (>= i n) (break bst)
                                       (block (set! bst (add_one bst (vec-get nums i)))
                                              (set! i (+ i 1))))))))

(fun (contain bst n)
     (if (= bst false)
       false
       (let ((curr (vec-get bst 0)))
         (if (= curr n)
           true
           (if (< n curr)
             (contain (vec-get bst 1) n)
             (contain (vec-get bst 2) n))))))

(let ((bst false))
  (block
 (set! bst (const false (vec 8 4 12 2 6 10 14 1 3 5 7 9 11 13 15) 15))
   (print bst)
   (print (contain bst 1))
   (print (contain bst 123))
  ))